// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AdjacentTableColumns holds the columns for the "AdjacentTable" table.
	AdjacentTableColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "additional_description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "profile_id", Type: field.TypeInt, Nullable: true},
		{Name: "sector_id", Type: field.TypeInt, Nullable: true},
	}
	// AdjacentTableTable holds the schema information for the "AdjacentTable" table.
	AdjacentTableTable = &schema.Table{
		Name:       "AdjacentTable",
		Columns:    AdjacentTableColumns,
		PrimaryKey: []*schema.Column{AdjacentTableColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "AdjacentTable_Profile_AdjacentTables",
				Columns:    []*schema.Column{AdjacentTableColumns[2]},
				RefColumns: []*schema.Column{ProfileColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "AdjacentTable_Sector_AdjacentTables",
				Columns:    []*schema.Column{AdjacentTableColumns[3]},
				RefColumns: []*schema.Column{SectorColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AdminColumns holds the columns for the "Admin" table.
	AdminColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "login", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "institute_id", Type: field.TypeInt, Nullable: true},
	}
	// AdminTable holds the schema information for the "Admin" table.
	AdminTable = &schema.Table{
		Name:       "Admin",
		Columns:    AdminColumns,
		PrimaryKey: []*schema.Column{AdminColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Admin_Institute_Admins",
				Columns:    []*schema.Column{AdminColumns[3]},
				RefColumns: []*schema.Column{InstituteColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DirectionColumns holds the columns for the "Direction" table.
	DirectionColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "institute_id", Type: field.TypeInt, Nullable: true},
	}
	// DirectionTable holds the schema information for the "Direction" table.
	DirectionTable = &schema.Table{
		Name:       "Direction",
		Columns:    DirectionColumns,
		PrimaryKey: []*schema.Column{DirectionColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Direction_Institute_Directions",
				Columns:    []*schema.Column{DirectionColumns[2]},
				RefColumns: []*schema.Column{InstituteColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// InstituteColumns holds the columns for the "Institute" table.
	InstituteColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// InstituteTable holds the schema information for the "Institute" table.
	InstituteTable = &schema.Table{
		Name:       "Institute",
		Columns:    InstituteColumns,
		PrimaryKey: []*schema.Column{InstituteColumns[0]},
	}
	// ProfileColumns holds the columns for the "Profile" table.
	ProfileColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "direction_id", Type: field.TypeInt, Nullable: true},
	}
	// ProfileTable holds the schema information for the "Profile" table.
	ProfileTable = &schema.Table{
		Name:       "Profile",
		Columns:    ProfileColumns,
		PrimaryKey: []*schema.Column{ProfileColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Profile_Direction_Profile",
				Columns:    []*schema.Column{ProfileColumns[2]},
				RefColumns: []*schema.Column{DirectionColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SectorColumns holds the columns for the "Sector" table.
	SectorColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "coords", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// SectorTable holds the schema information for the "Sector" table.
	SectorTable = &schema.Table{
		Name:       "Sector",
		Columns:    SectorColumns,
		PrimaryKey: []*schema.Column{SectorColumns[0]},
	}
	// SuperAdminColumns holds the columns for the "SuperAdmin" table.
	SuperAdminColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "login", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Nullable: true},
	}
	// SuperAdminTable holds the schema information for the "SuperAdmin" table.
	SuperAdminTable = &schema.Table{
		Name:       "SuperAdmin",
		Columns:    SuperAdminColumns,
		PrimaryKey: []*schema.Column{SuperAdminColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AdjacentTableTable,
		AdminTable,
		DirectionTable,
		InstituteTable,
		ProfileTable,
		SectorTable,
		SuperAdminTable,
	}
)

func init() {
	AdjacentTableTable.ForeignKeys[0].RefTable = ProfileTable
	AdjacentTableTable.ForeignKeys[1].RefTable = SectorTable
	AdjacentTableTable.Annotation = &entsql.Annotation{
		Table: "AdjacentTable",
	}
	AdminTable.ForeignKeys[0].RefTable = InstituteTable
	AdminTable.Annotation = &entsql.Annotation{
		Table: "Admin",
	}
	DirectionTable.ForeignKeys[0].RefTable = InstituteTable
	DirectionTable.Annotation = &entsql.Annotation{
		Table: "Direction",
	}
	InstituteTable.Annotation = &entsql.Annotation{
		Table: "Institute",
	}
	ProfileTable.ForeignKeys[0].RefTable = DirectionTable
	ProfileTable.Annotation = &entsql.Annotation{
		Table: "Profile",
	}
	SectorTable.Annotation = &entsql.Annotation{
		Table: "Sector",
	}
	SuperAdminTable.Annotation = &entsql.Annotation{
		Table: "SuperAdmin",
	}
}
