// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/0B1t322/Magic-Circle/ent/adjacenttable"
	"github.com/0B1t322/Magic-Circle/ent/direction"
	"github.com/0B1t322/Magic-Circle/ent/institute"
	"github.com/0B1t322/Magic-Circle/ent/predicate"
	"github.com/0B1t322/Magic-Circle/ent/profile"
	"github.com/0B1t322/Magic-Circle/ent/sector"
	"github.com/0B1t322/Magic-Circle/ent/variant"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdjacentTable = "AdjacentTable"
	TypeDirection     = "Direction"
	TypeInstitute     = "Institute"
	TypeProfile       = "Profile"
	TypeSector        = "Sector"
	TypeVariant       = "Variant"
)

// AdjacentTableMutation represents an operation that mutates the AdjacentTable nodes in the graph.
type AdjacentTableMutation struct {
	config
	op              Op
	typ             string
	id              *int
	description     *string
	clearedFields   map[string]struct{}
	_Variant        *int
	cleared_Variant bool
	_Sector         *int
	cleared_Sector  bool
	done            bool
	oldValue        func(context.Context) (*AdjacentTable, error)
	predicates      []predicate.AdjacentTable
}

var _ ent.Mutation = (*AdjacentTableMutation)(nil)

// adjacenttableOption allows management of the mutation configuration using functional options.
type adjacenttableOption func(*AdjacentTableMutation)

// newAdjacentTableMutation creates new mutation for the AdjacentTable entity.
func newAdjacentTableMutation(c config, op Op, opts ...adjacenttableOption) *AdjacentTableMutation {
	m := &AdjacentTableMutation{
		config:        c,
		op:            op,
		typ:           TypeAdjacentTable,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdjacentTableID sets the ID field of the mutation.
func withAdjacentTableID(id int) adjacenttableOption {
	return func(m *AdjacentTableMutation) {
		var (
			err   error
			once  sync.Once
			value *AdjacentTable
		)
		m.oldValue = func(ctx context.Context) (*AdjacentTable, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdjacentTable.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdjacentTable sets the old AdjacentTable of the mutation.
func withAdjacentTable(node *AdjacentTable) adjacenttableOption {
	return func(m *AdjacentTableMutation) {
		m.oldValue = func(context.Context) (*AdjacentTable, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdjacentTableMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdjacentTableMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdjacentTableMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSectorID sets the "sector_id" field.
func (m *AdjacentTableMutation) SetSectorID(i int) {
	m._Sector = &i
}

// SectorID returns the value of the "sector_id" field in the mutation.
func (m *AdjacentTableMutation) SectorID() (r int, exists bool) {
	v := m._Sector
	if v == nil {
		return
	}
	return *v, true
}

// OldSectorID returns the old "sector_id" field's value of the AdjacentTable entity.
// If the AdjacentTable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdjacentTableMutation) OldSectorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSectorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSectorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSectorID: %w", err)
	}
	return oldValue.SectorID, nil
}

// ResetSectorID resets all changes to the "sector_id" field.
func (m *AdjacentTableMutation) ResetSectorID() {
	m._Sector = nil
}

// SetVariantID sets the "variant_id" field.
func (m *AdjacentTableMutation) SetVariantID(i int) {
	m._Variant = &i
}

// VariantID returns the value of the "variant_id" field in the mutation.
func (m *AdjacentTableMutation) VariantID() (r int, exists bool) {
	v := m._Variant
	if v == nil {
		return
	}
	return *v, true
}

// OldVariantID returns the old "variant_id" field's value of the AdjacentTable entity.
// If the AdjacentTable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdjacentTableMutation) OldVariantID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVariantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVariantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVariantID: %w", err)
	}
	return oldValue.VariantID, nil
}

// ResetVariantID resets all changes to the "variant_id" field.
func (m *AdjacentTableMutation) ResetVariantID() {
	m._Variant = nil
}

// SetDescription sets the "description" field.
func (m *AdjacentTableMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AdjacentTableMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the AdjacentTable entity.
// If the AdjacentTable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdjacentTableMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *AdjacentTableMutation) ResetDescription() {
	m.description = nil
}

// ClearVariant clears the "Variant" edge to the Variant entity.
func (m *AdjacentTableMutation) ClearVariant() {
	m.cleared_Variant = true
}

// VariantCleared reports if the "Variant" edge to the Variant entity was cleared.
func (m *AdjacentTableMutation) VariantCleared() bool {
	return m.cleared_Variant
}

// VariantIDs returns the "Variant" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VariantID instead. It exists only for internal usage by the builders.
func (m *AdjacentTableMutation) VariantIDs() (ids []int) {
	if id := m._Variant; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVariant resets all changes to the "Variant" edge.
func (m *AdjacentTableMutation) ResetVariant() {
	m._Variant = nil
	m.cleared_Variant = false
}

// ClearSector clears the "Sector" edge to the Sector entity.
func (m *AdjacentTableMutation) ClearSector() {
	m.cleared_Sector = true
}

// SectorCleared reports if the "Sector" edge to the Sector entity was cleared.
func (m *AdjacentTableMutation) SectorCleared() bool {
	return m.cleared_Sector
}

// SectorIDs returns the "Sector" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SectorID instead. It exists only for internal usage by the builders.
func (m *AdjacentTableMutation) SectorIDs() (ids []int) {
	if id := m._Sector; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSector resets all changes to the "Sector" edge.
func (m *AdjacentTableMutation) ResetSector() {
	m._Sector = nil
	m.cleared_Sector = false
}

// Where appends a list predicates to the AdjacentTableMutation builder.
func (m *AdjacentTableMutation) Where(ps ...predicate.AdjacentTable) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AdjacentTableMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AdjacentTable).
func (m *AdjacentTableMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdjacentTableMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Sector != nil {
		fields = append(fields, adjacenttable.FieldSectorID)
	}
	if m._Variant != nil {
		fields = append(fields, adjacenttable.FieldVariantID)
	}
	if m.description != nil {
		fields = append(fields, adjacenttable.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdjacentTableMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adjacenttable.FieldSectorID:
		return m.SectorID()
	case adjacenttable.FieldVariantID:
		return m.VariantID()
	case adjacenttable.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdjacentTableMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adjacenttable.FieldSectorID:
		return m.OldSectorID(ctx)
	case adjacenttable.FieldVariantID:
		return m.OldVariantID(ctx)
	case adjacenttable.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown AdjacentTable field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdjacentTableMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adjacenttable.FieldSectorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSectorID(v)
		return nil
	case adjacenttable.FieldVariantID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVariantID(v)
		return nil
	case adjacenttable.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown AdjacentTable field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdjacentTableMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdjacentTableMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdjacentTableMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AdjacentTable numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdjacentTableMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdjacentTableMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdjacentTableMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AdjacentTable nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdjacentTableMutation) ResetField(name string) error {
	switch name {
	case adjacenttable.FieldSectorID:
		m.ResetSectorID()
		return nil
	case adjacenttable.FieldVariantID:
		m.ResetVariantID()
		return nil
	case adjacenttable.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown AdjacentTable field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdjacentTableMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._Variant != nil {
		edges = append(edges, adjacenttable.EdgeVariant)
	}
	if m._Sector != nil {
		edges = append(edges, adjacenttable.EdgeSector)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdjacentTableMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adjacenttable.EdgeVariant:
		if id := m._Variant; id != nil {
			return []ent.Value{*id}
		}
	case adjacenttable.EdgeSector:
		if id := m._Sector; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdjacentTableMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdjacentTableMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdjacentTableMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_Variant {
		edges = append(edges, adjacenttable.EdgeVariant)
	}
	if m.cleared_Sector {
		edges = append(edges, adjacenttable.EdgeSector)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdjacentTableMutation) EdgeCleared(name string) bool {
	switch name {
	case adjacenttable.EdgeVariant:
		return m.cleared_Variant
	case adjacenttable.EdgeSector:
		return m.cleared_Sector
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdjacentTableMutation) ClearEdge(name string) error {
	switch name {
	case adjacenttable.EdgeVariant:
		m.ClearVariant()
		return nil
	case adjacenttable.EdgeSector:
		m.ClearSector()
		return nil
	}
	return fmt.Errorf("unknown AdjacentTable unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdjacentTableMutation) ResetEdge(name string) error {
	switch name {
	case adjacenttable.EdgeVariant:
		m.ResetVariant()
		return nil
	case adjacenttable.EdgeSector:
		m.ResetSector()
		return nil
	}
	return fmt.Errorf("unknown AdjacentTable edge %s", name)
}

// DirectionMutation represents an operation that mutates the Direction nodes in the graph.
type DirectionMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	_Variants        map[int]struct{}
	removed_Variants map[int]struct{}
	cleared_Variants bool
	done             bool
	oldValue         func(context.Context) (*Direction, error)
	predicates       []predicate.Direction
}

var _ ent.Mutation = (*DirectionMutation)(nil)

// directionOption allows management of the mutation configuration using functional options.
type directionOption func(*DirectionMutation)

// newDirectionMutation creates new mutation for the Direction entity.
func newDirectionMutation(c config, op Op, opts ...directionOption) *DirectionMutation {
	m := &DirectionMutation{
		config:        c,
		op:            op,
		typ:           TypeDirection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDirectionID sets the ID field of the mutation.
func withDirectionID(id int) directionOption {
	return func(m *DirectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Direction
		)
		m.oldValue = func(ctx context.Context) (*Direction, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Direction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDirection sets the old Direction of the mutation.
func withDirection(node *Direction) directionOption {
	return func(m *DirectionMutation) {
		m.oldValue = func(context.Context) (*Direction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DirectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DirectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DirectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *DirectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DirectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Direction entity.
// If the Direction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DirectionMutation) ResetName() {
	m.name = nil
}

// AddVariantIDs adds the "Variants" edge to the Variant entity by ids.
func (m *DirectionMutation) AddVariantIDs(ids ...int) {
	if m._Variants == nil {
		m._Variants = make(map[int]struct{})
	}
	for i := range ids {
		m._Variants[ids[i]] = struct{}{}
	}
}

// ClearVariants clears the "Variants" edge to the Variant entity.
func (m *DirectionMutation) ClearVariants() {
	m.cleared_Variants = true
}

// VariantsCleared reports if the "Variants" edge to the Variant entity was cleared.
func (m *DirectionMutation) VariantsCleared() bool {
	return m.cleared_Variants
}

// RemoveVariantIDs removes the "Variants" edge to the Variant entity by IDs.
func (m *DirectionMutation) RemoveVariantIDs(ids ...int) {
	if m.removed_Variants == nil {
		m.removed_Variants = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._Variants, ids[i])
		m.removed_Variants[ids[i]] = struct{}{}
	}
}

// RemovedVariants returns the removed IDs of the "Variants" edge to the Variant entity.
func (m *DirectionMutation) RemovedVariantsIDs() (ids []int) {
	for id := range m.removed_Variants {
		ids = append(ids, id)
	}
	return
}

// VariantsIDs returns the "Variants" edge IDs in the mutation.
func (m *DirectionMutation) VariantsIDs() (ids []int) {
	for id := range m._Variants {
		ids = append(ids, id)
	}
	return
}

// ResetVariants resets all changes to the "Variants" edge.
func (m *DirectionMutation) ResetVariants() {
	m._Variants = nil
	m.cleared_Variants = false
	m.removed_Variants = nil
}

// Where appends a list predicates to the DirectionMutation builder.
func (m *DirectionMutation) Where(ps ...predicate.Direction) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DirectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Direction).
func (m *DirectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DirectionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, direction.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DirectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case direction.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DirectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case direction.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Direction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case direction.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Direction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DirectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DirectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Direction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DirectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DirectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DirectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Direction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DirectionMutation) ResetField(name string) error {
	switch name {
	case direction.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Direction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DirectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Variants != nil {
		edges = append(edges, direction.EdgeVariants)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DirectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case direction.EdgeVariants:
		ids := make([]ent.Value, 0, len(m._Variants))
		for id := range m._Variants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DirectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Variants != nil {
		edges = append(edges, direction.EdgeVariants)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DirectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case direction.EdgeVariants:
		ids := make([]ent.Value, 0, len(m.removed_Variants))
		for id := range m.removed_Variants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DirectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Variants {
		edges = append(edges, direction.EdgeVariants)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DirectionMutation) EdgeCleared(name string) bool {
	switch name {
	case direction.EdgeVariants:
		return m.cleared_Variants
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DirectionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Direction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DirectionMutation) ResetEdge(name string) error {
	switch name {
	case direction.EdgeVariants:
		m.ResetVariants()
		return nil
	}
	return fmt.Errorf("unknown Direction edge %s", name)
}

// InstituteMutation represents an operation that mutates the Institute nodes in the graph.
type InstituteMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	_Variants        map[int]struct{}
	removed_Variants map[int]struct{}
	cleared_Variants bool
	done             bool
	oldValue         func(context.Context) (*Institute, error)
	predicates       []predicate.Institute
}

var _ ent.Mutation = (*InstituteMutation)(nil)

// instituteOption allows management of the mutation configuration using functional options.
type instituteOption func(*InstituteMutation)

// newInstituteMutation creates new mutation for the Institute entity.
func newInstituteMutation(c config, op Op, opts ...instituteOption) *InstituteMutation {
	m := &InstituteMutation{
		config:        c,
		op:            op,
		typ:           TypeInstitute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInstituteID sets the ID field of the mutation.
func withInstituteID(id int) instituteOption {
	return func(m *InstituteMutation) {
		var (
			err   error
			once  sync.Once
			value *Institute
		)
		m.oldValue = func(ctx context.Context) (*Institute, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Institute.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInstitute sets the old Institute of the mutation.
func withInstitute(node *Institute) instituteOption {
	return func(m *InstituteMutation) {
		m.oldValue = func(context.Context) (*Institute, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InstituteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InstituteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InstituteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *InstituteMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *InstituteMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Institute entity.
// If the Institute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstituteMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *InstituteMutation) ResetName() {
	m.name = nil
}

// AddVariantIDs adds the "Variants" edge to the Variant entity by ids.
func (m *InstituteMutation) AddVariantIDs(ids ...int) {
	if m._Variants == nil {
		m._Variants = make(map[int]struct{})
	}
	for i := range ids {
		m._Variants[ids[i]] = struct{}{}
	}
}

// ClearVariants clears the "Variants" edge to the Variant entity.
func (m *InstituteMutation) ClearVariants() {
	m.cleared_Variants = true
}

// VariantsCleared reports if the "Variants" edge to the Variant entity was cleared.
func (m *InstituteMutation) VariantsCleared() bool {
	return m.cleared_Variants
}

// RemoveVariantIDs removes the "Variants" edge to the Variant entity by IDs.
func (m *InstituteMutation) RemoveVariantIDs(ids ...int) {
	if m.removed_Variants == nil {
		m.removed_Variants = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._Variants, ids[i])
		m.removed_Variants[ids[i]] = struct{}{}
	}
}

// RemovedVariants returns the removed IDs of the "Variants" edge to the Variant entity.
func (m *InstituteMutation) RemovedVariantsIDs() (ids []int) {
	for id := range m.removed_Variants {
		ids = append(ids, id)
	}
	return
}

// VariantsIDs returns the "Variants" edge IDs in the mutation.
func (m *InstituteMutation) VariantsIDs() (ids []int) {
	for id := range m._Variants {
		ids = append(ids, id)
	}
	return
}

// ResetVariants resets all changes to the "Variants" edge.
func (m *InstituteMutation) ResetVariants() {
	m._Variants = nil
	m.cleared_Variants = false
	m.removed_Variants = nil
}

// Where appends a list predicates to the InstituteMutation builder.
func (m *InstituteMutation) Where(ps ...predicate.Institute) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *InstituteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Institute).
func (m *InstituteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InstituteMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, institute.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InstituteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case institute.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InstituteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case institute.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Institute field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstituteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case institute.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Institute field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InstituteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InstituteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstituteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Institute numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InstituteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InstituteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InstituteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Institute nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InstituteMutation) ResetField(name string) error {
	switch name {
	case institute.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Institute field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InstituteMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Variants != nil {
		edges = append(edges, institute.EdgeVariants)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InstituteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case institute.EdgeVariants:
		ids := make([]ent.Value, 0, len(m._Variants))
		for id := range m._Variants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InstituteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Variants != nil {
		edges = append(edges, institute.EdgeVariants)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InstituteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case institute.EdgeVariants:
		ids := make([]ent.Value, 0, len(m.removed_Variants))
		for id := range m.removed_Variants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InstituteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Variants {
		edges = append(edges, institute.EdgeVariants)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InstituteMutation) EdgeCleared(name string) bool {
	switch name {
	case institute.EdgeVariants:
		return m.cleared_Variants
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InstituteMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Institute unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InstituteMutation) ResetEdge(name string) error {
	switch name {
	case institute.EdgeVariants:
		m.ResetVariants()
		return nil
	}
	return fmt.Errorf("unknown Institute edge %s", name)
}

// ProfileMutation represents an operation that mutates the Profile nodes in the graph.
type ProfileMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	_Variants        map[int]struct{}
	removed_Variants map[int]struct{}
	cleared_Variants bool
	done             bool
	oldValue         func(context.Context) (*Profile, error)
	predicates       []predicate.Profile
}

var _ ent.Mutation = (*ProfileMutation)(nil)

// profileOption allows management of the mutation configuration using functional options.
type profileOption func(*ProfileMutation)

// newProfileMutation creates new mutation for the Profile entity.
func newProfileMutation(c config, op Op, opts ...profileOption) *ProfileMutation {
	m := &ProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfileID sets the ID field of the mutation.
func withProfileID(id int) profileOption {
	return func(m *ProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *Profile
		)
		m.oldValue = func(ctx context.Context) (*Profile, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Profile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfile sets the old Profile of the mutation.
func withProfile(node *Profile) profileOption {
	return func(m *ProfileMutation) {
		m.oldValue = func(context.Context) (*Profile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ProfileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProfileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProfileMutation) ResetName() {
	m.name = nil
}

// AddVariantIDs adds the "Variants" edge to the Variant entity by ids.
func (m *ProfileMutation) AddVariantIDs(ids ...int) {
	if m._Variants == nil {
		m._Variants = make(map[int]struct{})
	}
	for i := range ids {
		m._Variants[ids[i]] = struct{}{}
	}
}

// ClearVariants clears the "Variants" edge to the Variant entity.
func (m *ProfileMutation) ClearVariants() {
	m.cleared_Variants = true
}

// VariantsCleared reports if the "Variants" edge to the Variant entity was cleared.
func (m *ProfileMutation) VariantsCleared() bool {
	return m.cleared_Variants
}

// RemoveVariantIDs removes the "Variants" edge to the Variant entity by IDs.
func (m *ProfileMutation) RemoveVariantIDs(ids ...int) {
	if m.removed_Variants == nil {
		m.removed_Variants = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._Variants, ids[i])
		m.removed_Variants[ids[i]] = struct{}{}
	}
}

// RemovedVariants returns the removed IDs of the "Variants" edge to the Variant entity.
func (m *ProfileMutation) RemovedVariantsIDs() (ids []int) {
	for id := range m.removed_Variants {
		ids = append(ids, id)
	}
	return
}

// VariantsIDs returns the "Variants" edge IDs in the mutation.
func (m *ProfileMutation) VariantsIDs() (ids []int) {
	for id := range m._Variants {
		ids = append(ids, id)
	}
	return
}

// ResetVariants resets all changes to the "Variants" edge.
func (m *ProfileMutation) ResetVariants() {
	m._Variants = nil
	m.cleared_Variants = false
	m.removed_Variants = nil
}

// Where appends a list predicates to the ProfileMutation builder.
func (m *ProfileMutation) Where(ps ...predicate.Profile) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Profile).
func (m *ProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfileMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, profile.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profile.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profile.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Profile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profile.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Profile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Profile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfileMutation) ResetField(name string) error {
	switch name {
	case profile.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Variants != nil {
		edges = append(edges, profile.EdgeVariants)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgeVariants:
		ids := make([]ent.Value, 0, len(m._Variants))
		for id := range m._Variants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Variants != nil {
		edges = append(edges, profile.EdgeVariants)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgeVariants:
		ids := make([]ent.Value, 0, len(m.removed_Variants))
		for id := range m.removed_Variants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Variants {
		edges = append(edges, profile.EdgeVariants)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case profile.EdgeVariants:
		return m.cleared_Variants
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfileMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Profile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfileMutation) ResetEdge(name string) error {
	switch name {
	case profile.EdgeVariants:
		m.ResetVariants()
		return nil
	}
	return fmt.Errorf("unknown Profile edge %s", name)
}

// SectorMutation represents an operation that mutates the Sector nodes in the graph.
type SectorMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	coords                 *string
	clearedFields          map[string]struct{}
	_AdjacentTables        map[int]struct{}
	removed_AdjacentTables map[int]struct{}
	cleared_AdjacentTables bool
	done                   bool
	oldValue               func(context.Context) (*Sector, error)
	predicates             []predicate.Sector
}

var _ ent.Mutation = (*SectorMutation)(nil)

// sectorOption allows management of the mutation configuration using functional options.
type sectorOption func(*SectorMutation)

// newSectorMutation creates new mutation for the Sector entity.
func newSectorMutation(c config, op Op, opts ...sectorOption) *SectorMutation {
	m := &SectorMutation{
		config:        c,
		op:            op,
		typ:           TypeSector,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSectorID sets the ID field of the mutation.
func withSectorID(id int) sectorOption {
	return func(m *SectorMutation) {
		var (
			err   error
			once  sync.Once
			value *Sector
		)
		m.oldValue = func(ctx context.Context) (*Sector, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Sector.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSector sets the old Sector of the mutation.
func withSector(node *Sector) sectorOption {
	return func(m *SectorMutation) {
		m.oldValue = func(context.Context) (*Sector, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SectorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SectorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SectorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCoords sets the "coords" field.
func (m *SectorMutation) SetCoords(s string) {
	m.coords = &s
}

// Coords returns the value of the "coords" field in the mutation.
func (m *SectorMutation) Coords() (r string, exists bool) {
	v := m.coords
	if v == nil {
		return
	}
	return *v, true
}

// OldCoords returns the old "coords" field's value of the Sector entity.
// If the Sector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SectorMutation) OldCoords(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCoords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCoords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoords: %w", err)
	}
	return oldValue.Coords, nil
}

// ResetCoords resets all changes to the "coords" field.
func (m *SectorMutation) ResetCoords() {
	m.coords = nil
}

// AddAdjacentTableIDs adds the "AdjacentTables" edge to the AdjacentTable entity by ids.
func (m *SectorMutation) AddAdjacentTableIDs(ids ...int) {
	if m._AdjacentTables == nil {
		m._AdjacentTables = make(map[int]struct{})
	}
	for i := range ids {
		m._AdjacentTables[ids[i]] = struct{}{}
	}
}

// ClearAdjacentTables clears the "AdjacentTables" edge to the AdjacentTable entity.
func (m *SectorMutation) ClearAdjacentTables() {
	m.cleared_AdjacentTables = true
}

// AdjacentTablesCleared reports if the "AdjacentTables" edge to the AdjacentTable entity was cleared.
func (m *SectorMutation) AdjacentTablesCleared() bool {
	return m.cleared_AdjacentTables
}

// RemoveAdjacentTableIDs removes the "AdjacentTables" edge to the AdjacentTable entity by IDs.
func (m *SectorMutation) RemoveAdjacentTableIDs(ids ...int) {
	if m.removed_AdjacentTables == nil {
		m.removed_AdjacentTables = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._AdjacentTables, ids[i])
		m.removed_AdjacentTables[ids[i]] = struct{}{}
	}
}

// RemovedAdjacentTables returns the removed IDs of the "AdjacentTables" edge to the AdjacentTable entity.
func (m *SectorMutation) RemovedAdjacentTablesIDs() (ids []int) {
	for id := range m.removed_AdjacentTables {
		ids = append(ids, id)
	}
	return
}

// AdjacentTablesIDs returns the "AdjacentTables" edge IDs in the mutation.
func (m *SectorMutation) AdjacentTablesIDs() (ids []int) {
	for id := range m._AdjacentTables {
		ids = append(ids, id)
	}
	return
}

// ResetAdjacentTables resets all changes to the "AdjacentTables" edge.
func (m *SectorMutation) ResetAdjacentTables() {
	m._AdjacentTables = nil
	m.cleared_AdjacentTables = false
	m.removed_AdjacentTables = nil
}

// Where appends a list predicates to the SectorMutation builder.
func (m *SectorMutation) Where(ps ...predicate.Sector) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SectorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Sector).
func (m *SectorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SectorMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.coords != nil {
		fields = append(fields, sector.FieldCoords)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SectorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sector.FieldCoords:
		return m.Coords()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SectorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sector.FieldCoords:
		return m.OldCoords(ctx)
	}
	return nil, fmt.Errorf("unknown Sector field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SectorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sector.FieldCoords:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoords(v)
		return nil
	}
	return fmt.Errorf("unknown Sector field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SectorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SectorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SectorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Sector numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SectorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SectorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SectorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Sector nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SectorMutation) ResetField(name string) error {
	switch name {
	case sector.FieldCoords:
		m.ResetCoords()
		return nil
	}
	return fmt.Errorf("unknown Sector field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SectorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._AdjacentTables != nil {
		edges = append(edges, sector.EdgeAdjacentTables)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SectorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sector.EdgeAdjacentTables:
		ids := make([]ent.Value, 0, len(m._AdjacentTables))
		for id := range m._AdjacentTables {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SectorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_AdjacentTables != nil {
		edges = append(edges, sector.EdgeAdjacentTables)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SectorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sector.EdgeAdjacentTables:
		ids := make([]ent.Value, 0, len(m.removed_AdjacentTables))
		for id := range m.removed_AdjacentTables {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SectorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_AdjacentTables {
		edges = append(edges, sector.EdgeAdjacentTables)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SectorMutation) EdgeCleared(name string) bool {
	switch name {
	case sector.EdgeAdjacentTables:
		return m.cleared_AdjacentTables
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SectorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Sector unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SectorMutation) ResetEdge(name string) error {
	switch name {
	case sector.EdgeAdjacentTables:
		m.ResetAdjacentTables()
		return nil
	}
	return fmt.Errorf("unknown Sector edge %s", name)
}

// VariantMutation represents an operation that mutates the Variant nodes in the graph.
type VariantMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	clearedFields          map[string]struct{}
	_Insitute              *int
	cleared_Insitute       bool
	_Direction             *int
	cleared_Direction      bool
	_Profile               *int
	cleared_Profile        bool
	_AdjacentTables        map[int]struct{}
	removed_AdjacentTables map[int]struct{}
	cleared_AdjacentTables bool
	done                   bool
	oldValue               func(context.Context) (*Variant, error)
	predicates             []predicate.Variant
}

var _ ent.Mutation = (*VariantMutation)(nil)

// variantOption allows management of the mutation configuration using functional options.
type variantOption func(*VariantMutation)

// newVariantMutation creates new mutation for the Variant entity.
func newVariantMutation(c config, op Op, opts ...variantOption) *VariantMutation {
	m := &VariantMutation{
		config:        c,
		op:            op,
		typ:           TypeVariant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVariantID sets the ID field of the mutation.
func withVariantID(id int) variantOption {
	return func(m *VariantMutation) {
		var (
			err   error
			once  sync.Once
			value *Variant
		)
		m.oldValue = func(ctx context.Context) (*Variant, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Variant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVariant sets the old Variant of the mutation.
func withVariant(node *Variant) variantOption {
	return func(m *VariantMutation) {
		m.oldValue = func(context.Context) (*Variant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VariantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VariantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VariantMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDirectionID sets the "direction_id" field.
func (m *VariantMutation) SetDirectionID(i int) {
	m._Direction = &i
}

// DirectionID returns the value of the "direction_id" field in the mutation.
func (m *VariantMutation) DirectionID() (r int, exists bool) {
	v := m._Direction
	if v == nil {
		return
	}
	return *v, true
}

// OldDirectionID returns the old "direction_id" field's value of the Variant entity.
// If the Variant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VariantMutation) OldDirectionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDirectionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDirectionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDirectionID: %w", err)
	}
	return oldValue.DirectionID, nil
}

// ResetDirectionID resets all changes to the "direction_id" field.
func (m *VariantMutation) ResetDirectionID() {
	m._Direction = nil
}

// SetProfileID sets the "profile_id" field.
func (m *VariantMutation) SetProfileID(i int) {
	m._Profile = &i
}

// ProfileID returns the value of the "profile_id" field in the mutation.
func (m *VariantMutation) ProfileID() (r int, exists bool) {
	v := m._Profile
	if v == nil {
		return
	}
	return *v, true
}

// OldProfileID returns the old "profile_id" field's value of the Variant entity.
// If the Variant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VariantMutation) OldProfileID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProfileID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProfileID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfileID: %w", err)
	}
	return oldValue.ProfileID, nil
}

// ResetProfileID resets all changes to the "profile_id" field.
func (m *VariantMutation) ResetProfileID() {
	m._Profile = nil
}

// SetInsituteID sets the "insitute_id" field.
func (m *VariantMutation) SetInsituteID(i int) {
	m._Insitute = &i
}

// InsituteID returns the value of the "insitute_id" field in the mutation.
func (m *VariantMutation) InsituteID() (r int, exists bool) {
	v := m._Insitute
	if v == nil {
		return
	}
	return *v, true
}

// OldInsituteID returns the old "insitute_id" field's value of the Variant entity.
// If the Variant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VariantMutation) OldInsituteID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInsituteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInsituteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInsituteID: %w", err)
	}
	return oldValue.InsituteID, nil
}

// ResetInsituteID resets all changes to the "insitute_id" field.
func (m *VariantMutation) ResetInsituteID() {
	m._Insitute = nil
}

// ClearInsitute clears the "Insitute" edge to the Institute entity.
func (m *VariantMutation) ClearInsitute() {
	m.cleared_Insitute = true
}

// InsituteCleared reports if the "Insitute" edge to the Institute entity was cleared.
func (m *VariantMutation) InsituteCleared() bool {
	return m.cleared_Insitute
}

// InsituteIDs returns the "Insitute" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InsituteID instead. It exists only for internal usage by the builders.
func (m *VariantMutation) InsituteIDs() (ids []int) {
	if id := m._Insitute; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInsitute resets all changes to the "Insitute" edge.
func (m *VariantMutation) ResetInsitute() {
	m._Insitute = nil
	m.cleared_Insitute = false
}

// ClearDirection clears the "Direction" edge to the Direction entity.
func (m *VariantMutation) ClearDirection() {
	m.cleared_Direction = true
}

// DirectionCleared reports if the "Direction" edge to the Direction entity was cleared.
func (m *VariantMutation) DirectionCleared() bool {
	return m.cleared_Direction
}

// DirectionIDs returns the "Direction" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DirectionID instead. It exists only for internal usage by the builders.
func (m *VariantMutation) DirectionIDs() (ids []int) {
	if id := m._Direction; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDirection resets all changes to the "Direction" edge.
func (m *VariantMutation) ResetDirection() {
	m._Direction = nil
	m.cleared_Direction = false
}

// ClearProfile clears the "Profile" edge to the Profile entity.
func (m *VariantMutation) ClearProfile() {
	m.cleared_Profile = true
}

// ProfileCleared reports if the "Profile" edge to the Profile entity was cleared.
func (m *VariantMutation) ProfileCleared() bool {
	return m.cleared_Profile
}

// ProfileIDs returns the "Profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfileID instead. It exists only for internal usage by the builders.
func (m *VariantMutation) ProfileIDs() (ids []int) {
	if id := m._Profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfile resets all changes to the "Profile" edge.
func (m *VariantMutation) ResetProfile() {
	m._Profile = nil
	m.cleared_Profile = false
}

// AddAdjacentTableIDs adds the "AdjacentTables" edge to the AdjacentTable entity by ids.
func (m *VariantMutation) AddAdjacentTableIDs(ids ...int) {
	if m._AdjacentTables == nil {
		m._AdjacentTables = make(map[int]struct{})
	}
	for i := range ids {
		m._AdjacentTables[ids[i]] = struct{}{}
	}
}

// ClearAdjacentTables clears the "AdjacentTables" edge to the AdjacentTable entity.
func (m *VariantMutation) ClearAdjacentTables() {
	m.cleared_AdjacentTables = true
}

// AdjacentTablesCleared reports if the "AdjacentTables" edge to the AdjacentTable entity was cleared.
func (m *VariantMutation) AdjacentTablesCleared() bool {
	return m.cleared_AdjacentTables
}

// RemoveAdjacentTableIDs removes the "AdjacentTables" edge to the AdjacentTable entity by IDs.
func (m *VariantMutation) RemoveAdjacentTableIDs(ids ...int) {
	if m.removed_AdjacentTables == nil {
		m.removed_AdjacentTables = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._AdjacentTables, ids[i])
		m.removed_AdjacentTables[ids[i]] = struct{}{}
	}
}

// RemovedAdjacentTables returns the removed IDs of the "AdjacentTables" edge to the AdjacentTable entity.
func (m *VariantMutation) RemovedAdjacentTablesIDs() (ids []int) {
	for id := range m.removed_AdjacentTables {
		ids = append(ids, id)
	}
	return
}

// AdjacentTablesIDs returns the "AdjacentTables" edge IDs in the mutation.
func (m *VariantMutation) AdjacentTablesIDs() (ids []int) {
	for id := range m._AdjacentTables {
		ids = append(ids, id)
	}
	return
}

// ResetAdjacentTables resets all changes to the "AdjacentTables" edge.
func (m *VariantMutation) ResetAdjacentTables() {
	m._AdjacentTables = nil
	m.cleared_AdjacentTables = false
	m.removed_AdjacentTables = nil
}

// Where appends a list predicates to the VariantMutation builder.
func (m *VariantMutation) Where(ps ...predicate.Variant) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VariantMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Variant).
func (m *VariantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VariantMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Direction != nil {
		fields = append(fields, variant.FieldDirectionID)
	}
	if m._Profile != nil {
		fields = append(fields, variant.FieldProfileID)
	}
	if m._Insitute != nil {
		fields = append(fields, variant.FieldInsituteID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VariantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case variant.FieldDirectionID:
		return m.DirectionID()
	case variant.FieldProfileID:
		return m.ProfileID()
	case variant.FieldInsituteID:
		return m.InsituteID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VariantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case variant.FieldDirectionID:
		return m.OldDirectionID(ctx)
	case variant.FieldProfileID:
		return m.OldProfileID(ctx)
	case variant.FieldInsituteID:
		return m.OldInsituteID(ctx)
	}
	return nil, fmt.Errorf("unknown Variant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VariantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case variant.FieldDirectionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDirectionID(v)
		return nil
	case variant.FieldProfileID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfileID(v)
		return nil
	case variant.FieldInsituteID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInsituteID(v)
		return nil
	}
	return fmt.Errorf("unknown Variant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VariantMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VariantMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VariantMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Variant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VariantMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VariantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VariantMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Variant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VariantMutation) ResetField(name string) error {
	switch name {
	case variant.FieldDirectionID:
		m.ResetDirectionID()
		return nil
	case variant.FieldProfileID:
		m.ResetProfileID()
		return nil
	case variant.FieldInsituteID:
		m.ResetInsituteID()
		return nil
	}
	return fmt.Errorf("unknown Variant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VariantMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m._Insitute != nil {
		edges = append(edges, variant.EdgeInsitute)
	}
	if m._Direction != nil {
		edges = append(edges, variant.EdgeDirection)
	}
	if m._Profile != nil {
		edges = append(edges, variant.EdgeProfile)
	}
	if m._AdjacentTables != nil {
		edges = append(edges, variant.EdgeAdjacentTables)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VariantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case variant.EdgeInsitute:
		if id := m._Insitute; id != nil {
			return []ent.Value{*id}
		}
	case variant.EdgeDirection:
		if id := m._Direction; id != nil {
			return []ent.Value{*id}
		}
	case variant.EdgeProfile:
		if id := m._Profile; id != nil {
			return []ent.Value{*id}
		}
	case variant.EdgeAdjacentTables:
		ids := make([]ent.Value, 0, len(m._AdjacentTables))
		for id := range m._AdjacentTables {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VariantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removed_AdjacentTables != nil {
		edges = append(edges, variant.EdgeAdjacentTables)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VariantMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case variant.EdgeAdjacentTables:
		ids := make([]ent.Value, 0, len(m.removed_AdjacentTables))
		for id := range m.removed_AdjacentTables {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VariantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleared_Insitute {
		edges = append(edges, variant.EdgeInsitute)
	}
	if m.cleared_Direction {
		edges = append(edges, variant.EdgeDirection)
	}
	if m.cleared_Profile {
		edges = append(edges, variant.EdgeProfile)
	}
	if m.cleared_AdjacentTables {
		edges = append(edges, variant.EdgeAdjacentTables)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VariantMutation) EdgeCleared(name string) bool {
	switch name {
	case variant.EdgeInsitute:
		return m.cleared_Insitute
	case variant.EdgeDirection:
		return m.cleared_Direction
	case variant.EdgeProfile:
		return m.cleared_Profile
	case variant.EdgeAdjacentTables:
		return m.cleared_AdjacentTables
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VariantMutation) ClearEdge(name string) error {
	switch name {
	case variant.EdgeInsitute:
		m.ClearInsitute()
		return nil
	case variant.EdgeDirection:
		m.ClearDirection()
		return nil
	case variant.EdgeProfile:
		m.ClearProfile()
		return nil
	}
	return fmt.Errorf("unknown Variant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VariantMutation) ResetEdge(name string) error {
	switch name {
	case variant.EdgeInsitute:
		m.ResetInsitute()
		return nil
	case variant.EdgeDirection:
		m.ResetDirection()
		return nil
	case variant.EdgeProfile:
		m.ResetProfile()
		return nil
	case variant.EdgeAdjacentTables:
		m.ResetAdjacentTables()
		return nil
	}
	return fmt.Errorf("unknown Variant edge %s", name)
}
