// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/Magic-Circle/ent/adjacenttable"
	"github.com/0B1t322/Magic-Circle/ent/profile"
	"github.com/0B1t322/Magic-Circle/ent/sector"
)

// AdjacentTableCreate is the builder for creating a AdjacentTable entity.
type AdjacentTableCreate struct {
	config
	mutation *AdjacentTableMutation
	hooks    []Hook
}

// SetSectorID sets the "sector_id" field.
func (atc *AdjacentTableCreate) SetSectorID(i int) *AdjacentTableCreate {
	atc.mutation.SetSectorID(i)
	return atc
}

// SetProfileID sets the "profile_id" field.
func (atc *AdjacentTableCreate) SetProfileID(i int) *AdjacentTableCreate {
	atc.mutation.SetProfileID(i)
	return atc
}

// SetAdditionalDescription sets the "additionalDescription" field.
func (atc *AdjacentTableCreate) SetAdditionalDescription(s string) *AdjacentTableCreate {
	atc.mutation.SetAdditionalDescription(s)
	return atc
}

// SetNillableAdditionalDescription sets the "additionalDescription" field if the given value is not nil.
func (atc *AdjacentTableCreate) SetNillableAdditionalDescription(s *string) *AdjacentTableCreate {
	if s != nil {
		atc.SetAdditionalDescription(*s)
	}
	return atc
}

// SetProfile sets the "Profile" edge to the Profile entity.
func (atc *AdjacentTableCreate) SetProfile(p *Profile) *AdjacentTableCreate {
	return atc.SetProfileID(p.ID)
}

// SetSector sets the "Sector" edge to the Sector entity.
func (atc *AdjacentTableCreate) SetSector(s *Sector) *AdjacentTableCreate {
	return atc.SetSectorID(s.ID)
}

// Mutation returns the AdjacentTableMutation object of the builder.
func (atc *AdjacentTableCreate) Mutation() *AdjacentTableMutation {
	return atc.mutation
}

// Save creates the AdjacentTable in the database.
func (atc *AdjacentTableCreate) Save(ctx context.Context) (*AdjacentTable, error) {
	var (
		err  error
		node *AdjacentTable
	)
	if len(atc.hooks) == 0 {
		if err = atc.check(); err != nil {
			return nil, err
		}
		node, err = atc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdjacentTableMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atc.check(); err != nil {
				return nil, err
			}
			atc.mutation = mutation
			if node, err = atc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(atc.hooks) - 1; i >= 0; i-- {
			if atc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AdjacentTableCreate) SaveX(ctx context.Context) *AdjacentTable {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AdjacentTableCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AdjacentTableCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AdjacentTableCreate) check() error {
	if _, ok := atc.mutation.SectorID(); !ok {
		return &ValidationError{Name: "sector_id", err: errors.New(`ent: missing required field "sector_id"`)}
	}
	if _, ok := atc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile_id", err: errors.New(`ent: missing required field "profile_id"`)}
	}
	if _, ok := atc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "Profile", err: errors.New("ent: missing required edge \"Profile\"")}
	}
	if _, ok := atc.mutation.SectorID(); !ok {
		return &ValidationError{Name: "Sector", err: errors.New("ent: missing required edge \"Sector\"")}
	}
	return nil
}

func (atc *AdjacentTableCreate) sqlSave(ctx context.Context) (*AdjacentTable, error) {
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (atc *AdjacentTableCreate) createSpec() (*AdjacentTable, *sqlgraph.CreateSpec) {
	var (
		_node = &AdjacentTable{config: atc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: adjacenttable.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adjacenttable.FieldID,
			},
		}
	)
	if value, ok := atc.mutation.AdditionalDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adjacenttable.FieldAdditionalDescription,
		})
		_node.AdditionalDescription = value
	}
	if nodes := atc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adjacenttable.ProfileTable,
			Columns: []string{adjacenttable.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.SectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adjacenttable.SectorTable,
			Columns: []string{adjacenttable.SectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SectorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdjacentTableCreateBulk is the builder for creating many AdjacentTable entities in bulk.
type AdjacentTableCreateBulk struct {
	config
	builders []*AdjacentTableCreate
}

// Save creates the AdjacentTable entities in the database.
func (atcb *AdjacentTableCreateBulk) Save(ctx context.Context) ([]*AdjacentTable, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AdjacentTable, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdjacentTableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AdjacentTableCreateBulk) SaveX(ctx context.Context) []*AdjacentTable {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AdjacentTableCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AdjacentTableCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
