// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/Magic-Circle/ent/predicate"
	"github.com/0B1t322/Magic-Circle/ent/superadmin"
)

// SuperAdminQuery is the builder for querying SuperAdmin entities.
type SuperAdminQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SuperAdmin
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SuperAdminQuery builder.
func (saq *SuperAdminQuery) Where(ps ...predicate.SuperAdmin) *SuperAdminQuery {
	saq.predicates = append(saq.predicates, ps...)
	return saq
}

// Limit adds a limit step to the query.
func (saq *SuperAdminQuery) Limit(limit int) *SuperAdminQuery {
	saq.limit = &limit
	return saq
}

// Offset adds an offset step to the query.
func (saq *SuperAdminQuery) Offset(offset int) *SuperAdminQuery {
	saq.offset = &offset
	return saq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (saq *SuperAdminQuery) Unique(unique bool) *SuperAdminQuery {
	saq.unique = &unique
	return saq
}

// Order adds an order step to the query.
func (saq *SuperAdminQuery) Order(o ...OrderFunc) *SuperAdminQuery {
	saq.order = append(saq.order, o...)
	return saq
}

// First returns the first SuperAdmin entity from the query.
// Returns a *NotFoundError when no SuperAdmin was found.
func (saq *SuperAdminQuery) First(ctx context.Context) (*SuperAdmin, error) {
	nodes, err := saq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{superadmin.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (saq *SuperAdminQuery) FirstX(ctx context.Context) *SuperAdmin {
	node, err := saq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SuperAdmin ID from the query.
// Returns a *NotFoundError when no SuperAdmin ID was found.
func (saq *SuperAdminQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = saq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{superadmin.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (saq *SuperAdminQuery) FirstIDX(ctx context.Context) int {
	id, err := saq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SuperAdmin entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SuperAdmin entity is not found.
// Returns a *NotFoundError when no SuperAdmin entities are found.
func (saq *SuperAdminQuery) Only(ctx context.Context) (*SuperAdmin, error) {
	nodes, err := saq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{superadmin.Label}
	default:
		return nil, &NotSingularError{superadmin.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (saq *SuperAdminQuery) OnlyX(ctx context.Context) *SuperAdmin {
	node, err := saq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SuperAdmin ID in the query.
// Returns a *NotSingularError when exactly one SuperAdmin ID is not found.
// Returns a *NotFoundError when no entities are found.
func (saq *SuperAdminQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = saq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{superadmin.Label}
	default:
		err = &NotSingularError{superadmin.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (saq *SuperAdminQuery) OnlyIDX(ctx context.Context) int {
	id, err := saq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SuperAdmins.
func (saq *SuperAdminQuery) All(ctx context.Context) ([]*SuperAdmin, error) {
	if err := saq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return saq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (saq *SuperAdminQuery) AllX(ctx context.Context) []*SuperAdmin {
	nodes, err := saq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SuperAdmin IDs.
func (saq *SuperAdminQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := saq.Select(superadmin.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (saq *SuperAdminQuery) IDsX(ctx context.Context) []int {
	ids, err := saq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (saq *SuperAdminQuery) Count(ctx context.Context) (int, error) {
	if err := saq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return saq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (saq *SuperAdminQuery) CountX(ctx context.Context) int {
	count, err := saq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (saq *SuperAdminQuery) Exist(ctx context.Context) (bool, error) {
	if err := saq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return saq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (saq *SuperAdminQuery) ExistX(ctx context.Context) bool {
	exist, err := saq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SuperAdminQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (saq *SuperAdminQuery) Clone() *SuperAdminQuery {
	if saq == nil {
		return nil
	}
	return &SuperAdminQuery{
		config:     saq.config,
		limit:      saq.limit,
		offset:     saq.offset,
		order:      append([]OrderFunc{}, saq.order...),
		predicates: append([]predicate.SuperAdmin{}, saq.predicates...),
		// clone intermediate query.
		sql:  saq.sql.Clone(),
		path: saq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Login string `json:"login,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SuperAdmin.Query().
//		GroupBy(superadmin.FieldLogin).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (saq *SuperAdminQuery) GroupBy(field string, fields ...string) *SuperAdminGroupBy {
	group := &SuperAdminGroupBy{config: saq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return saq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Login string `json:"login,omitempty"`
//	}
//
//	client.SuperAdmin.Query().
//		Select(superadmin.FieldLogin).
//		Scan(ctx, &v)
//
func (saq *SuperAdminQuery) Select(fields ...string) *SuperAdminSelect {
	saq.fields = append(saq.fields, fields...)
	return &SuperAdminSelect{SuperAdminQuery: saq}
}

func (saq *SuperAdminQuery) prepareQuery(ctx context.Context) error {
	for _, f := range saq.fields {
		if !superadmin.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if saq.path != nil {
		prev, err := saq.path(ctx)
		if err != nil {
			return err
		}
		saq.sql = prev
	}
	return nil
}

func (saq *SuperAdminQuery) sqlAll(ctx context.Context) ([]*SuperAdmin, error) {
	var (
		nodes = []*SuperAdmin{}
		_spec = saq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SuperAdmin{config: saq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, saq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (saq *SuperAdminQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := saq.querySpec()
	return sqlgraph.CountNodes(ctx, saq.driver, _spec)
}

func (saq *SuperAdminQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := saq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (saq *SuperAdminQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   superadmin.Table,
			Columns: superadmin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: superadmin.FieldID,
			},
		},
		From:   saq.sql,
		Unique: true,
	}
	if unique := saq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := saq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, superadmin.FieldID)
		for i := range fields {
			if fields[i] != superadmin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := saq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := saq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := saq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := saq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (saq *SuperAdminQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(saq.driver.Dialect())
	t1 := builder.Table(superadmin.Table)
	columns := saq.fields
	if len(columns) == 0 {
		columns = superadmin.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if saq.sql != nil {
		selector = saq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range saq.predicates {
		p(selector)
	}
	for _, p := range saq.order {
		p(selector)
	}
	if offset := saq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := saq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SuperAdminGroupBy is the group-by builder for SuperAdmin entities.
type SuperAdminGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sagb *SuperAdminGroupBy) Aggregate(fns ...AggregateFunc) *SuperAdminGroupBy {
	sagb.fns = append(sagb.fns, fns...)
	return sagb
}

// Scan applies the group-by query and scans the result into the given value.
func (sagb *SuperAdminGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sagb.path(ctx)
	if err != nil {
		return err
	}
	sagb.sql = query
	return sagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sagb *SuperAdminGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sagb *SuperAdminGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sagb.fields) > 1 {
		return nil, errors.New("ent: SuperAdminGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sagb *SuperAdminGroupBy) StringsX(ctx context.Context) []string {
	v, err := sagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sagb *SuperAdminGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{superadmin.Label}
	default:
		err = fmt.Errorf("ent: SuperAdminGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sagb *SuperAdminGroupBy) StringX(ctx context.Context) string {
	v, err := sagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sagb *SuperAdminGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sagb.fields) > 1 {
		return nil, errors.New("ent: SuperAdminGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sagb *SuperAdminGroupBy) IntsX(ctx context.Context) []int {
	v, err := sagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sagb *SuperAdminGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{superadmin.Label}
	default:
		err = fmt.Errorf("ent: SuperAdminGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sagb *SuperAdminGroupBy) IntX(ctx context.Context) int {
	v, err := sagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sagb *SuperAdminGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sagb.fields) > 1 {
		return nil, errors.New("ent: SuperAdminGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sagb *SuperAdminGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sagb *SuperAdminGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{superadmin.Label}
	default:
		err = fmt.Errorf("ent: SuperAdminGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sagb *SuperAdminGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sagb *SuperAdminGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sagb.fields) > 1 {
		return nil, errors.New("ent: SuperAdminGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sagb *SuperAdminGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sagb *SuperAdminGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{superadmin.Label}
	default:
		err = fmt.Errorf("ent: SuperAdminGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sagb *SuperAdminGroupBy) BoolX(ctx context.Context) bool {
	v, err := sagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sagb *SuperAdminGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sagb.fields {
		if !superadmin.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sagb *SuperAdminGroupBy) sqlQuery() *sql.Selector {
	selector := sagb.sql.Select()
	aggregation := make([]string, 0, len(sagb.fns))
	for _, fn := range sagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sagb.fields)+len(sagb.fns))
		for _, f := range sagb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sagb.fields...)...)
}

// SuperAdminSelect is the builder for selecting fields of SuperAdmin entities.
type SuperAdminSelect struct {
	*SuperAdminQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sas *SuperAdminSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sas.prepareQuery(ctx); err != nil {
		return err
	}
	sas.sql = sas.SuperAdminQuery.sqlQuery(ctx)
	return sas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sas *SuperAdminSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sas *SuperAdminSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sas.fields) > 1 {
		return nil, errors.New("ent: SuperAdminSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sas *SuperAdminSelect) StringsX(ctx context.Context) []string {
	v, err := sas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sas *SuperAdminSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{superadmin.Label}
	default:
		err = fmt.Errorf("ent: SuperAdminSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sas *SuperAdminSelect) StringX(ctx context.Context) string {
	v, err := sas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sas *SuperAdminSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sas.fields) > 1 {
		return nil, errors.New("ent: SuperAdminSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sas *SuperAdminSelect) IntsX(ctx context.Context) []int {
	v, err := sas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sas *SuperAdminSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{superadmin.Label}
	default:
		err = fmt.Errorf("ent: SuperAdminSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sas *SuperAdminSelect) IntX(ctx context.Context) int {
	v, err := sas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sas *SuperAdminSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sas.fields) > 1 {
		return nil, errors.New("ent: SuperAdminSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sas *SuperAdminSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sas *SuperAdminSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{superadmin.Label}
	default:
		err = fmt.Errorf("ent: SuperAdminSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sas *SuperAdminSelect) Float64X(ctx context.Context) float64 {
	v, err := sas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sas *SuperAdminSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sas.fields) > 1 {
		return nil, errors.New("ent: SuperAdminSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sas *SuperAdminSelect) BoolsX(ctx context.Context) []bool {
	v, err := sas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sas *SuperAdminSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{superadmin.Label}
	default:
		err = fmt.Errorf("ent: SuperAdminSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sas *SuperAdminSelect) BoolX(ctx context.Context) bool {
	v, err := sas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sas *SuperAdminSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sas.sql.Query()
	if err := sas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
