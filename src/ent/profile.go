// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/0B1t322/Magic-Circle/ent/direction"
	"github.com/0B1t322/Magic-Circle/ent/profile"
)

// Profile is the model entity for the Profile schema.
type Profile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DirectionID holds the value of the "direction_id" field.
	DirectionID int `json:"direction_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileQuery when eager-loading is set.
	Edges ProfileEdges `json:"edges"`
}

// ProfileEdges holds the relations/edges for other nodes in the graph.
type ProfileEdges struct {
	// Direction holds the value of the Direction edge.
	Direction *Direction `json:"Direction,omitempty"`
	// AdjacentTables holds the value of the AdjacentTables edge.
	AdjacentTables []*AdjacentTable `json:"AdjacentTables,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DirectionOrErr returns the Direction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileEdges) DirectionOrErr() (*Direction, error) {
	if e.loadedTypes[0] {
		if e.Direction == nil {
			// The edge Direction was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: direction.Label}
		}
		return e.Direction, nil
	}
	return nil, &NotLoadedError{edge: "Direction"}
}

// AdjacentTablesOrErr returns the AdjacentTables value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) AdjacentTablesOrErr() ([]*AdjacentTable, error) {
	if e.loadedTypes[1] {
		return e.AdjacentTables, nil
	}
	return nil, &NotLoadedError{edge: "AdjacentTables"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profile) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case profile.FieldID, profile.FieldDirectionID:
			values[i] = new(sql.NullInt64)
		case profile.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Profile", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profile fields.
func (pr *Profile) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case profile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case profile.FieldDirectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field direction_id", values[i])
			} else if value.Valid {
				pr.DirectionID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDirection queries the "Direction" edge of the Profile entity.
func (pr *Profile) QueryDirection() *DirectionQuery {
	return (&ProfileClient{config: pr.config}).QueryDirection(pr)
}

// QueryAdjacentTables queries the "AdjacentTables" edge of the Profile entity.
func (pr *Profile) QueryAdjacentTables() *AdjacentTableQuery {
	return (&ProfileClient{config: pr.config}).QueryAdjacentTables(pr)
}

// Update returns a builder for updating this Profile.
// Note that you need to call Profile.Unwrap() before calling this method if this Profile
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profile) Update() *ProfileUpdateOne {
	return (&ProfileClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Profile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profile) Unwrap() *Profile {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profile is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profile) String() string {
	var builder strings.Builder
	builder.WriteString("Profile(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", direction_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.DirectionID))
	builder.WriteByte(')')
	return builder.String()
}

// Profiles is a parsable slice of Profile.
type Profiles []*Profile

func (pr Profiles) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
