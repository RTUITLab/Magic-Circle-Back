// Code generated by entc, DO NOT EDIT.

package adjacenttable

const (
	// Label holds the string label denoting the adjacenttable type in the database.
	Label = "adjacent_table"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSectorID holds the string denoting the sector_id field in the database.
	FieldSectorID = "sector_id"
	// FieldProfileID holds the string denoting the profile_id field in the database.
	FieldProfileID = "profile_id"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "Profile"
	// EdgeSector holds the string denoting the sector edge name in mutations.
	EdgeSector = "Sector"
	// Table holds the table name of the adjacenttable in the database.
	Table = "AdjacentTable"
	// ProfileTable is the table that holds the Profile relation/edge.
	ProfileTable = "AdjacentTable"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "Profile"
	// ProfileColumn is the table column denoting the Profile relation/edge.
	ProfileColumn = "profile_id"
	// SectorTable is the table that holds the Sector relation/edge.
	SectorTable = "AdjacentTable"
	// SectorInverseTable is the table name for the Sector entity.
	// It exists in this package in order to avoid circular dependency with the "sector" package.
	SectorInverseTable = "Sector"
	// SectorColumn is the table column denoting the Sector relation/edge.
	SectorColumn = "sector_id"
)

// Columns holds all SQL columns for adjacenttable fields.
var Columns = []string{
	FieldID,
	FieldSectorID,
	FieldProfileID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
