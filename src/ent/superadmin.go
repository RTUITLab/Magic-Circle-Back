// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/0B1t322/Magic-Circle/ent/superadmin"
)

// SuperAdmin is the model entity for the SuperAdmin schema.
type SuperAdmin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Login holds the value of the "login" field.
	Login string `json:"login,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SuperAdmin) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case superadmin.FieldID:
			values[i] = new(sql.NullInt64)
		case superadmin.FieldLogin, superadmin.FieldPassword, superadmin.FieldEmail:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SuperAdmin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SuperAdmin fields.
func (sa *SuperAdmin) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case superadmin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = int(value.Int64)
		case superadmin.FieldLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login", values[i])
			} else if value.Valid {
				sa.Login = value.String
			}
		case superadmin.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				sa.Password = value.String
			}
		case superadmin.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				sa.Email = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SuperAdmin.
// Note that you need to call SuperAdmin.Unwrap() before calling this method if this SuperAdmin
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SuperAdmin) Update() *SuperAdminUpdateOne {
	return (&SuperAdminClient{config: sa.config}).UpdateOne(sa)
}

// Unwrap unwraps the SuperAdmin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SuperAdmin) Unwrap() *SuperAdmin {
	tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SuperAdmin is not a transactional entity")
	}
	sa.config.driver = tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SuperAdmin) String() string {
	var builder strings.Builder
	builder.WriteString("SuperAdmin(")
	builder.WriteString(fmt.Sprintf("id=%v", sa.ID))
	builder.WriteString(", login=")
	builder.WriteString(sa.Login)
	builder.WriteString(", password=")
	builder.WriteString(sa.Password)
	builder.WriteString(", email=")
	builder.WriteString(sa.Email)
	builder.WriteByte(')')
	return builder.String()
}

// SuperAdmins is a parsable slice of SuperAdmin.
type SuperAdmins []*SuperAdmin

func (sa SuperAdmins) config(cfg config) {
	for _i := range sa {
		sa[_i].config = cfg
	}
}
