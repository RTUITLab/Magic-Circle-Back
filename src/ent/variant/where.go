// Code generated by entc, DO NOT EDIT.

package variant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/0B1t322/Magic-Circle/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DirectionID applies equality check predicate on the "direction_id" field. It's identical to DirectionIDEQ.
func DirectionID(v int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirectionID), v))
	})
}

// ProfileID applies equality check predicate on the "profile_id" field. It's identical to ProfileIDEQ.
func ProfileID(v int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileID), v))
	})
}

// InsituteID applies equality check predicate on the "insitute_id" field. It's identical to InsituteIDEQ.
func InsituteID(v int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInsituteID), v))
	})
}

// DirectionIDEQ applies the EQ predicate on the "direction_id" field.
func DirectionIDEQ(v int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirectionID), v))
	})
}

// DirectionIDNEQ applies the NEQ predicate on the "direction_id" field.
func DirectionIDNEQ(v int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDirectionID), v))
	})
}

// DirectionIDIn applies the In predicate on the "direction_id" field.
func DirectionIDIn(vs ...int) predicate.Variant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Variant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDirectionID), v...))
	})
}

// DirectionIDNotIn applies the NotIn predicate on the "direction_id" field.
func DirectionIDNotIn(vs ...int) predicate.Variant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Variant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDirectionID), v...))
	})
}

// ProfileIDEQ applies the EQ predicate on the "profile_id" field.
func ProfileIDEQ(v int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileID), v))
	})
}

// ProfileIDNEQ applies the NEQ predicate on the "profile_id" field.
func ProfileIDNEQ(v int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProfileID), v))
	})
}

// ProfileIDIn applies the In predicate on the "profile_id" field.
func ProfileIDIn(vs ...int) predicate.Variant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Variant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProfileID), v...))
	})
}

// ProfileIDNotIn applies the NotIn predicate on the "profile_id" field.
func ProfileIDNotIn(vs ...int) predicate.Variant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Variant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProfileID), v...))
	})
}

// InsituteIDEQ applies the EQ predicate on the "insitute_id" field.
func InsituteIDEQ(v int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInsituteID), v))
	})
}

// InsituteIDNEQ applies the NEQ predicate on the "insitute_id" field.
func InsituteIDNEQ(v int) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInsituteID), v))
	})
}

// InsituteIDIn applies the In predicate on the "insitute_id" field.
func InsituteIDIn(vs ...int) predicate.Variant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Variant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInsituteID), v...))
	})
}

// InsituteIDNotIn applies the NotIn predicate on the "insitute_id" field.
func InsituteIDNotIn(vs ...int) predicate.Variant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Variant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInsituteID), v...))
	})
}

// HasInsitute applies the HasEdge predicate on the "Insitute" edge.
func HasInsitute() predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InsituteTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InsituteTable, InsituteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInsituteWith applies the HasEdge predicate on the "Insitute" edge with a given conditions (other predicates).
func HasInsituteWith(preds ...predicate.Institute) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InsituteInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InsituteTable, InsituteColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDirection applies the HasEdge predicate on the "Direction" edge.
func HasDirection() predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DirectionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DirectionTable, DirectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDirectionWith applies the HasEdge predicate on the "Direction" edge with a given conditions (other predicates).
func HasDirectionWith(preds ...predicate.Direction) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DirectionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DirectionTable, DirectionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfile applies the HasEdge predicate on the "Profile" edge.
func HasProfile() predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProfileTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "Profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProfileInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdjacentTables applies the HasEdge predicate on the "AdjacentTables" edge.
func HasAdjacentTables() predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdjacentTablesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AdjacentTablesTable, AdjacentTablesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdjacentTablesWith applies the HasEdge predicate on the "AdjacentTables" edge with a given conditions (other predicates).
func HasAdjacentTablesWith(preds ...predicate.AdjacentTable) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdjacentTablesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AdjacentTablesTable, AdjacentTablesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Variant) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Variant) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Variant) predicate.Variant {
	return predicate.Variant(func(s *sql.Selector) {
		p(s.Not())
	})
}
