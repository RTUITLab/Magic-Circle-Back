// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/Magic-Circle/ent/adjacenttable"
	"github.com/0B1t322/Magic-Circle/ent/direction"
	"github.com/0B1t322/Magic-Circle/ent/institute"
	"github.com/0B1t322/Magic-Circle/ent/predicate"
	"github.com/0B1t322/Magic-Circle/ent/profile"
	"github.com/0B1t322/Magic-Circle/ent/variant"
)

// VariantUpdate is the builder for updating Variant entities.
type VariantUpdate struct {
	config
	hooks    []Hook
	mutation *VariantMutation
}

// Where appends a list predicates to the VariantUpdate builder.
func (vu *VariantUpdate) Where(ps ...predicate.Variant) *VariantUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetDirectionID sets the "direction_id" field.
func (vu *VariantUpdate) SetDirectionID(i int) *VariantUpdate {
	vu.mutation.SetDirectionID(i)
	return vu
}

// SetProfileID sets the "profile_id" field.
func (vu *VariantUpdate) SetProfileID(i int) *VariantUpdate {
	vu.mutation.SetProfileID(i)
	return vu
}

// SetInsituteID sets the "insitute_id" field.
func (vu *VariantUpdate) SetInsituteID(i int) *VariantUpdate {
	vu.mutation.SetInsituteID(i)
	return vu
}

// SetInsitute sets the "Insitute" edge to the Institute entity.
func (vu *VariantUpdate) SetInsitute(i *Institute) *VariantUpdate {
	return vu.SetInsituteID(i.ID)
}

// SetDirection sets the "Direction" edge to the Direction entity.
func (vu *VariantUpdate) SetDirection(d *Direction) *VariantUpdate {
	return vu.SetDirectionID(d.ID)
}

// SetProfile sets the "Profile" edge to the Profile entity.
func (vu *VariantUpdate) SetProfile(p *Profile) *VariantUpdate {
	return vu.SetProfileID(p.ID)
}

// AddAdjacentTableIDs adds the "AdjacentTables" edge to the AdjacentTable entity by IDs.
func (vu *VariantUpdate) AddAdjacentTableIDs(ids ...int) *VariantUpdate {
	vu.mutation.AddAdjacentTableIDs(ids...)
	return vu
}

// AddAdjacentTables adds the "AdjacentTables" edges to the AdjacentTable entity.
func (vu *VariantUpdate) AddAdjacentTables(a ...*AdjacentTable) *VariantUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vu.AddAdjacentTableIDs(ids...)
}

// Mutation returns the VariantMutation object of the builder.
func (vu *VariantUpdate) Mutation() *VariantMutation {
	return vu.mutation
}

// ClearInsitute clears the "Insitute" edge to the Institute entity.
func (vu *VariantUpdate) ClearInsitute() *VariantUpdate {
	vu.mutation.ClearInsitute()
	return vu
}

// ClearDirection clears the "Direction" edge to the Direction entity.
func (vu *VariantUpdate) ClearDirection() *VariantUpdate {
	vu.mutation.ClearDirection()
	return vu
}

// ClearProfile clears the "Profile" edge to the Profile entity.
func (vu *VariantUpdate) ClearProfile() *VariantUpdate {
	vu.mutation.ClearProfile()
	return vu
}

// ClearAdjacentTables clears all "AdjacentTables" edges to the AdjacentTable entity.
func (vu *VariantUpdate) ClearAdjacentTables() *VariantUpdate {
	vu.mutation.ClearAdjacentTables()
	return vu
}

// RemoveAdjacentTableIDs removes the "AdjacentTables" edge to AdjacentTable entities by IDs.
func (vu *VariantUpdate) RemoveAdjacentTableIDs(ids ...int) *VariantUpdate {
	vu.mutation.RemoveAdjacentTableIDs(ids...)
	return vu
}

// RemoveAdjacentTables removes "AdjacentTables" edges to AdjacentTable entities.
func (vu *VariantUpdate) RemoveAdjacentTables(a ...*AdjacentTable) *VariantUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vu.RemoveAdjacentTableIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VariantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VariantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VariantUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VariantUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VariantUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VariantUpdate) check() error {
	if _, ok := vu.mutation.InsituteID(); vu.mutation.InsituteCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Insitute\"")
	}
	if _, ok := vu.mutation.DirectionID(); vu.mutation.DirectionCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Direction\"")
	}
	if _, ok := vu.mutation.ProfileID(); vu.mutation.ProfileCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Profile\"")
	}
	return nil
}

func (vu *VariantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   variant.Table,
			Columns: variant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: variant.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vu.mutation.InsituteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.InsituteTable,
			Columns: []string{variant.InsituteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: institute.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.InsituteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.InsituteTable,
			Columns: []string{variant.InsituteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: institute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.DirectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.DirectionTable,
			Columns: []string{variant.DirectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: direction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.DirectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.DirectionTable,
			Columns: []string{variant.DirectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: direction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.ProfileTable,
			Columns: []string{variant.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.ProfileTable,
			Columns: []string{variant.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.AdjacentTablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   variant.AdjacentTablesTable,
			Columns: []string{variant.AdjacentTablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adjacenttable.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedAdjacentTablesIDs(); len(nodes) > 0 && !vu.mutation.AdjacentTablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   variant.AdjacentTablesTable,
			Columns: []string{variant.AdjacentTablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adjacenttable.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.AdjacentTablesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   variant.AdjacentTablesTable,
			Columns: []string{variant.AdjacentTablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adjacenttable.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{variant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VariantUpdateOne is the builder for updating a single Variant entity.
type VariantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VariantMutation
}

// SetDirectionID sets the "direction_id" field.
func (vuo *VariantUpdateOne) SetDirectionID(i int) *VariantUpdateOne {
	vuo.mutation.SetDirectionID(i)
	return vuo
}

// SetProfileID sets the "profile_id" field.
func (vuo *VariantUpdateOne) SetProfileID(i int) *VariantUpdateOne {
	vuo.mutation.SetProfileID(i)
	return vuo
}

// SetInsituteID sets the "insitute_id" field.
func (vuo *VariantUpdateOne) SetInsituteID(i int) *VariantUpdateOne {
	vuo.mutation.SetInsituteID(i)
	return vuo
}

// SetInsitute sets the "Insitute" edge to the Institute entity.
func (vuo *VariantUpdateOne) SetInsitute(i *Institute) *VariantUpdateOne {
	return vuo.SetInsituteID(i.ID)
}

// SetDirection sets the "Direction" edge to the Direction entity.
func (vuo *VariantUpdateOne) SetDirection(d *Direction) *VariantUpdateOne {
	return vuo.SetDirectionID(d.ID)
}

// SetProfile sets the "Profile" edge to the Profile entity.
func (vuo *VariantUpdateOne) SetProfile(p *Profile) *VariantUpdateOne {
	return vuo.SetProfileID(p.ID)
}

// AddAdjacentTableIDs adds the "AdjacentTables" edge to the AdjacentTable entity by IDs.
func (vuo *VariantUpdateOne) AddAdjacentTableIDs(ids ...int) *VariantUpdateOne {
	vuo.mutation.AddAdjacentTableIDs(ids...)
	return vuo
}

// AddAdjacentTables adds the "AdjacentTables" edges to the AdjacentTable entity.
func (vuo *VariantUpdateOne) AddAdjacentTables(a ...*AdjacentTable) *VariantUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vuo.AddAdjacentTableIDs(ids...)
}

// Mutation returns the VariantMutation object of the builder.
func (vuo *VariantUpdateOne) Mutation() *VariantMutation {
	return vuo.mutation
}

// ClearInsitute clears the "Insitute" edge to the Institute entity.
func (vuo *VariantUpdateOne) ClearInsitute() *VariantUpdateOne {
	vuo.mutation.ClearInsitute()
	return vuo
}

// ClearDirection clears the "Direction" edge to the Direction entity.
func (vuo *VariantUpdateOne) ClearDirection() *VariantUpdateOne {
	vuo.mutation.ClearDirection()
	return vuo
}

// ClearProfile clears the "Profile" edge to the Profile entity.
func (vuo *VariantUpdateOne) ClearProfile() *VariantUpdateOne {
	vuo.mutation.ClearProfile()
	return vuo
}

// ClearAdjacentTables clears all "AdjacentTables" edges to the AdjacentTable entity.
func (vuo *VariantUpdateOne) ClearAdjacentTables() *VariantUpdateOne {
	vuo.mutation.ClearAdjacentTables()
	return vuo
}

// RemoveAdjacentTableIDs removes the "AdjacentTables" edge to AdjacentTable entities by IDs.
func (vuo *VariantUpdateOne) RemoveAdjacentTableIDs(ids ...int) *VariantUpdateOne {
	vuo.mutation.RemoveAdjacentTableIDs(ids...)
	return vuo
}

// RemoveAdjacentTables removes "AdjacentTables" edges to AdjacentTable entities.
func (vuo *VariantUpdateOne) RemoveAdjacentTables(a ...*AdjacentTable) *VariantUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vuo.RemoveAdjacentTableIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VariantUpdateOne) Select(field string, fields ...string) *VariantUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Variant entity.
func (vuo *VariantUpdateOne) Save(ctx context.Context) (*Variant, error) {
	var (
		err  error
		node *Variant
	)
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VariantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VariantUpdateOne) SaveX(ctx context.Context) *Variant {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VariantUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VariantUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VariantUpdateOne) check() error {
	if _, ok := vuo.mutation.InsituteID(); vuo.mutation.InsituteCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Insitute\"")
	}
	if _, ok := vuo.mutation.DirectionID(); vuo.mutation.DirectionCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Direction\"")
	}
	if _, ok := vuo.mutation.ProfileID(); vuo.mutation.ProfileCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Profile\"")
	}
	return nil
}

func (vuo *VariantUpdateOne) sqlSave(ctx context.Context) (_node *Variant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   variant.Table,
			Columns: variant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: variant.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Variant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, variant.FieldID)
		for _, f := range fields {
			if !variant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != variant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vuo.mutation.InsituteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.InsituteTable,
			Columns: []string{variant.InsituteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: institute.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.InsituteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.InsituteTable,
			Columns: []string{variant.InsituteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: institute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.DirectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.DirectionTable,
			Columns: []string{variant.DirectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: direction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.DirectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.DirectionTable,
			Columns: []string{variant.DirectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: direction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.ProfileTable,
			Columns: []string{variant.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.ProfileTable,
			Columns: []string{variant.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.AdjacentTablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   variant.AdjacentTablesTable,
			Columns: []string{variant.AdjacentTablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adjacenttable.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedAdjacentTablesIDs(); len(nodes) > 0 && !vuo.mutation.AdjacentTablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   variant.AdjacentTablesTable,
			Columns: []string{variant.AdjacentTablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adjacenttable.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.AdjacentTablesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   variant.AdjacentTablesTable,
			Columns: []string{variant.AdjacentTablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adjacenttable.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Variant{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{variant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
